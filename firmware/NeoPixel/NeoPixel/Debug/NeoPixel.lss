
NeoPixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00803802  00803802  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002229  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b13  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043a  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000044cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f4f  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000187  00000000  00000000  00005483  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e6 e0       	ldi	r30, 0x06	; 6
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 3b       	cpi	r26, 0xB6	; 182
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
    // This register is protected and can not be changed until the CPP register in the CPU
    // is written with the signature of 0xD8 ... I think I need to insert some assembly code here
    // This PEN flag is reset, this means that the Source clock is fed right through and not pre-scaled.
    // This needs to be checked for the electrical characteristics is such that the full 5V is required.

    CPU_CCP = CCP_IOREG_gc;
  ba:	88 ed       	ldi	r24, 0xD8	; 216
  bc:	84 bf       	out	0x34, r24	; 52
    CLKCTRL.MCLKCTRLB = 0x02;
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    PORTA.DIR |= 1 << 1;
  c4:	e0 e0       	ldi	r30, 0x00	; 0
  c6:	f4 e0       	ldi	r31, 0x04	; 4
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
#include "neopixel.h"



int main(void)
{
  ce:	c0 e0       	ldi	r28, 0x00	; 0
*/
	while(1)
	{
        for (int i = 0; i < neopixel_pixels; i++)
        {
	        neopixel_setPixel(i, 0xFF, 0x00, 0x00);
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	6f ef       	ldi	r22, 0xFF	; 255
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 a7 00 	call	0x14e	; 0x14e <neopixel_setPixel>
  dc:	cf 5f       	subi	r28, 0xFF	; 255
	        neopixel_setPixel(i, 0xFF, 0xFF, 0xFF);
        }
*/
	while(1)
	{
        for (int i = 0; i < neopixel_pixels; i++)
  de:	cc 33       	cpi	r28, 0x3C	; 60
  e0:	b9 f7       	brne	.-18     	; 0xd0 <main+0x16>
        {
	        neopixel_setPixel(i, 0xFF, 0x00, 0x00);
        }
		neopixel_show();
  e2:	0e 94 ba 00 	call	0x174	; 0x174 <neopixel_show>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	9d e3       	ldi	r25, 0x3D	; 61
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x32>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x3c>
  f6:	00 00       	nop
  f8:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
		{
			neopixel_setPixel(i, 0x00, 0xFF, 0x00);
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	4f ef       	ldi	r20, 0xFF	; 255
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 a7 00 	call	0x14e	; 0x14e <neopixel_setPixel>
 106:	cf 5f       	subi	r28, 0xFF	; 255
        {
	        neopixel_setPixel(i, 0xFF, 0x00, 0x00);
        }
		neopixel_show();
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
 108:	cc 33       	cpi	r28, 0x3C	; 60
 10a:	b9 f7       	brne	.-18     	; 0xfa <main+0x40>
		{
			neopixel_setPixel(i, 0x00, 0xFF, 0x00);
		}
		neopixel_show();
 10c:	0e 94 ba 00 	call	0x174	; 0x174 <neopixel_show>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	9d e3       	ldi	r25, 0x3D	; 61
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x5c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x66>
 120:	00 00       	nop
 122:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
		{
			neopixel_setPixel(i, 0x00, 0x00, 0xFF);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 a7 00 	call	0x14e	; 0x14e <neopixel_setPixel>
 130:	cf 5f       	subi	r28, 0xFF	; 255
		{
			neopixel_setPixel(i, 0x00, 0xFF, 0x00);
		}
		neopixel_show();
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
 132:	cc 33       	cpi	r28, 0x3C	; 60
 134:	b9 f7       	brne	.-18     	; 0x124 <main+0x6a>
		{
			neopixel_setPixel(i, 0x00, 0x00, 0xFF);
		}
		neopixel_show();
 136:	0e 94 ba 00 	call	0x174	; 0x174 <neopixel_show>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	9d e3       	ldi	r25, 0x3D	; 61
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x86>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x90>
 14a:	00 00       	nop
 14c:	c0 cf       	rjmp	.-128    	; 0xce <main+0x14>

0000014e <neopixel_setPixel>:
uint8_t pinMask = 0x02;

void neopixel_setPixel(uint8_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    uint8_t location = pixel * 3;
	buffer[ location + red ] = red;
 14e:	98 2f       	mov	r25, r24
 150:	99 0f       	add	r25, r25
 152:	89 0f       	add	r24, r25
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	8e 5f       	subi	r24, 0xFE	; 254
 158:	97 4c       	sbci	r25, 0xC7	; 199
 15a:	fc 01       	movw	r30, r24
 15c:	e6 0f       	add	r30, r22
 15e:	f1 1d       	adc	r31, r1
 160:	60 83       	st	Z, r22
	buffer[ location + green ] = green;
 162:	fc 01       	movw	r30, r24
 164:	e4 0f       	add	r30, r20
 166:	f1 1d       	adc	r31, r1
 168:	40 83       	st	Z, r20
	buffer[ location + blue ] = blue;
 16a:	fc 01       	movw	r30, r24
 16c:	e2 0f       	add	r30, r18
 16e:	f1 1d       	adc	r31, r1
 170:	20 83       	st	Z, r18
 172:	08 95       	ret

00000174 <neopixel_show>:

}

#ifdef _NEO_SHOW_SLOW
void neopixel_show()
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	27 97       	sbiw	r28, 0x07	; 7
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	de bf       	out	0x3e, r29	; 62
	volatile uint16_t  i   = neopixel_buffer_size; // Loop counter
 182:	84 eb       	ldi	r24, 0xB4	; 180
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	9a 83       	std	Y+2, r25	; 0x02

	volatile uint8_t *port;

	volatile uint8_t *ptr = &buffer[0],   // Pointer to next byte
	b   = *ptr++,   // Current byte value
 18a:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 18e:	8b 83       	std	Y+3, r24	; 0x03
	hi,             // PORT w/output bit set high
	lo;             // PORT w/output bit set low

	volatile uint8_t next, bit;

	hi = VPORTA_OUT |  pinMask;
 190:	91 b1       	in	r25, 0x01	; 1
 192:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 196:	98 2b       	or	r25, r24
 198:	9c 83       	std	Y+4, r25	; 0x04
	lo = VPORTA_OUT & ~pinMask;
 19a:	91 b1       	in	r25, 0x01	; 1
 19c:	80 95       	com	r24
 19e:	89 23       	and	r24, r25
 1a0:	8d 83       	std	Y+5, r24	; 0x05
    next = lo;
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	8e 83       	std	Y+6, r24	; 0x06
    bit  = 8;
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	8f 83       	std	Y+7, r24	; 0x07

	port = &VPORTA_OUT;

    asm volatile(
 1aa:	5d 81       	ldd	r21, Y+5	; 0x05
 1ac:	6c 81       	ldd	r22, Y+4	; 0x04
 1ae:	4b 81       	ldd	r20, Y+3	; 0x03
 1b0:	3f 81       	ldd	r19, Y+7	; 0x07
 1b2:	2e 81       	ldd	r18, Y+6	; 0x06
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	e1 e0       	ldi	r30, 0x01	; 1
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	a3 e0       	ldi	r26, 0x03	; 3
 1be:	b8 e3       	ldi	r27, 0x38	; 56

000001c0 <head20>:
 1c0:	50 83       	st	Z, r21
 1c2:	47 fd       	sbrc	r20, 7
 1c4:	25 2f       	mov	r18, r21
 1c6:	3a 95       	dec	r19
 1c8:	20 83       	st	Z, r18
 1ca:	26 2f       	mov	r18, r22
 1cc:	49 f0       	breq	.+18     	; 0x1e0 <nextbyte20>
 1ce:	44 1f       	adc	r20, r20
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <head20+0x12>
 1d2:	00 00       	nop
 1d4:	00 00       	nop
 1d6:	00 00       	nop
 1d8:	60 83       	st	Z, r22
 1da:	00 00       	nop
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <head20+0x1e>
 1de:	f0 cf       	rjmp	.-32     	; 0x1c0 <head20>

000001e0 <nextbyte20>:
 1e0:	38 e0       	ldi	r19, 0x08	; 8
 1e2:	4d 91       	ld	r20, X+
 1e4:	60 83       	st	Z, r22
 1e6:	00 00       	nop
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	51 f7       	brne	.-44     	; 0x1c0 <head20>
 1ec:	4b 83       	std	Y+3, r20	; 0x03
 1ee:	3f 83       	std	Y+7, r19	; 0x07
 1f0:	2e 83       	std	Y+6, r18	; 0x06
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	9a 83       	std	Y+2, r25	; 0x02
    [lo]     "r" (lo));
*/



}
 1f6:	27 96       	adiw	r28, 0x07	; 7
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
