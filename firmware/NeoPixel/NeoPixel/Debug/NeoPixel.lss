
NeoPixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00803802  00803802  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268e  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c12  00000000  00000000  00002b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fc  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00004f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001024  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095c  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00006a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ec e6       	ldi	r30, 0x6C	; 108
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 3b       	cpi	r26, 0xB6	; 182
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  b2:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <delay_ms>:
			neopixel_shift(direction);
		}
		delay_ms(delay);

	}
}
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	6c f4       	brge	.+26     	; 0xda <delay_ms+0x20>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	e7 e8       	ldi	r30, 0x87	; 135
  c6:	f3 e1       	ldi	r31, 0x13	; 19
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <delay_ms+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <delay_ms+0x14>
  ce:	00 00       	nop
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	82 17       	cp	r24, r18
  d6:	93 07       	cpc	r25, r19
  d8:	a9 f7       	brne	.-22     	; 0xc4 <delay_ms+0xa>
  da:	08 95       	ret

000000dc <pixel_chaser>:
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	16 16       	cp	r1, r22
  ec:	17 06       	cpc	r1, r23
  ee:	8c f4       	brge	.+34     	; 0x112 <pixel_chaser+0x36>
  f0:	6a 01       	movw	r12, r20
  f2:	8b 01       	movw	r16, r22
  f4:	f8 2e       	mov	r15, r24
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	8f 2d       	mov	r24, r15
  fc:	0e 94 1e 01 	call	0x23c	; 0x23c <neopixel_shift>
 100:	0e 94 5d 01 	call	0x2ba	; 0x2ba <neopixel_show>
 104:	c6 01       	movw	r24, r12
 106:	0e 94 5d 00 	call	0xba	; 0xba <delay_ms>
 10a:	21 96       	adiw	r28, 0x01	; 1
 10c:	0c 17       	cp	r16, r28
 10e:	1d 07       	cpc	r17, r29
 110:	a1 f7       	brne	.-24     	; 0xfa <pixel_chaser+0x1e>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	df 90       	pop	r13
 11e:	cf 90       	pop	r12
 120:	08 95       	ret

00000122 <init_rainbow>:
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	0f 2e       	mov	r0, r31
 132:	f3 e0       	ldi	r31, 0x03	; 3
 134:	ff 2e       	mov	r15, r31
 136:	f0 2d       	mov	r31, r0
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	13 e0       	ldi	r17, 0x03	; 3
 13c:	09 c0       	rjmp	.+18     	; 0x150 <init_rainbow+0x2e>
 13e:	ca 30       	cpi	r28, 0x0A	; 10
 140:	d1 05       	cpc	r29, r1
 142:	34 f4       	brge	.+12     	; 0x150 <init_rainbow+0x2e>
 144:	0f 2e       	mov	r0, r31
 146:	f3 e0       	ldi	r31, 0x03	; 3
 148:	ff 2e       	mov	r15, r31
 14a:	f0 2d       	mov	r31, r0
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	13 e0       	ldi	r17, 0x03	; 3
 150:	ce 01       	movw	r24, r28
 152:	9e 01       	movw	r18, r28
 154:	2a 50       	subi	r18, 0x0A	; 10
 156:	31 09       	sbc	r19, r1
 158:	2a 30       	cpi	r18, 0x0A	; 10
 15a:	31 05       	cpc	r19, r1
 15c:	18 f4       	brcc	.+6      	; 0x164 <init_rainbow+0x42>
 15e:	f1 2c       	mov	r15, r1
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	13 e0       	ldi	r17, 0x03	; 3
 164:	9c 01       	movw	r18, r24
 166:	24 51       	subi	r18, 0x14	; 20
 168:	31 09       	sbc	r19, r1
 16a:	2a 30       	cpi	r18, 0x0A	; 10
 16c:	31 05       	cpc	r19, r1
 16e:	18 f4       	brcc	.+6      	; 0x176 <init_rainbow+0x54>
 170:	f1 2c       	mov	r15, r1
 172:	03 e0       	ldi	r16, 0x03	; 3
 174:	13 e0       	ldi	r17, 0x03	; 3
 176:	9c 01       	movw	r18, r24
 178:	2e 51       	subi	r18, 0x1E	; 30
 17a:	31 09       	sbc	r19, r1
 17c:	2a 30       	cpi	r18, 0x0A	; 10
 17e:	31 05       	cpc	r19, r1
 180:	18 f4       	brcc	.+6      	; 0x188 <init_rainbow+0x66>
 182:	f1 2c       	mov	r15, r1
 184:	03 e0       	ldi	r16, 0x03	; 3
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	88 97       	sbiw	r24, 0x28	; 40
 18a:	0a 97       	sbiw	r24, 0x0a	; 10
 18c:	30 f4       	brcc	.+12     	; 0x19a <init_rainbow+0x78>
 18e:	0f 2e       	mov	r0, r31
 190:	f3 e0       	ldi	r31, 0x03	; 3
 192:	ff 2e       	mov	r15, r31
 194:	f0 2d       	mov	r31, r0
 196:	03 e0       	ldi	r16, 0x03	; 3
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	c2 33       	cpi	r28, 0x32	; 50
 19c:	d1 05       	cpc	r29, r1
 19e:	34 f0       	brlt	.+12     	; 0x1ac <init_rainbow+0x8a>
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f3 e0       	ldi	r31, 0x03	; 3
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	2f 2d       	mov	r18, r15
 1ae:	40 2f       	mov	r20, r16
 1b0:	61 2f       	mov	r22, r17
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 13 01 	call	0x226	; 0x226 <neopixel_setPixel>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	cc 33       	cpi	r28, 0x3C	; 60
 1bc:	d1 05       	cpc	r29, r1
 1be:	09 f0       	breq	.+2      	; 0x1c2 <init_rainbow+0xa0>
 1c0:	be cf       	rjmp	.-132    	; 0x13e <init_rainbow+0x1c>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	08 95       	ret

000001ce <main>:
	// This register is protected and can not be changed until the CPP register in the CPU
	// is written with the signature of 0xD8 ... I think I need to insert some assembly code here
	// This PEN flag is reset, this means that the Source clock is fed right through and not pre-scaled.
	// This needs to be checked for the electrical characteristics is such that the full 5V is required.

	CPU_CCP = CCP_IOREG_gc;
 1ce:	88 ed       	ldi	r24, 0xD8	; 216
 1d0:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = _MAIN_CLOCK;
 1d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

	PORTA.DIR |= 1 << 1;
 1d6:	e0 e0       	ldi	r30, 0x00	; 0
 1d8:	f4 e0       	ldi	r31, 0x04	; 4
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24

	int delay, positions;
	positions = 240;
	delay = 100;
	init_rainbow();
 1e0:	0e 94 91 00 	call	0x122	; 0x122 <init_rainbow>

	while(true){

		pixel_chaser(true, positions, delay);
 1e4:	44 e6       	ldi	r20, 0x64	; 100
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	60 ef       	ldi	r22, 0xF0	; 240
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 6e 00 	call	0xdc	; 0xdc <pixel_chaser>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	2f e7       	ldi	r18, 0x7F	; 127
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	9e e1       	ldi	r25, 0x1E	; 30
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x2a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x34>
 202:	00 00       	nop
		_delay_ms(500);
		pixel_chaser(false, positions, delay);
 204:	44 e6       	ldi	r20, 0x64	; 100
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	60 ef       	ldi	r22, 0xF0	; 240
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 6e 00 	call	0xdc	; 0xdc <pixel_chaser>
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	84 e8       	ldi	r24, 0x84	; 132
 216:	9e e1       	ldi	r25, 0x1E	; 30
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x4a>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x54>
 222:	00 00       	nop
 224:	df cf       	rjmp	.-66     	; 0x1e4 <main+0x16>

00000226 <neopixel_setPixel>:
void neopixel_alloff(void){
   for(int i = 0; i < neopixel_pixels; i++)
   {
      neopixel_setPixel(i, 0x00, 0x00, 0x00);
   }
}
 226:	e8 2f       	mov	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	8e 0f       	add	r24, r30
 22c:	e8 2f       	mov	r30, r24
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ee 5f       	subi	r30, 0xFE	; 254
 232:	f7 4c       	sbci	r31, 0xC7	; 199
 234:	61 83       	std	Z+1, r22	; 0x01
 236:	40 83       	st	Z, r20
 238:	22 83       	std	Z+2, r18	; 0x02
 23a:	08 95       	ret

0000023c <neopixel_shift>:



void neopixel_shift(bool direction){

   if( direction ) {
 23c:	88 23       	and	r24, r24
 23e:	d1 f0       	breq	.+52     	; 0x274 <neopixel_shift+0x38>
 240:	e2 e0       	ldi	r30, 0x02	; 2
 242:	f8 e3       	ldi	r31, 0x38	; 56
 244:	23 eb       	ldi	r18, 0xB3	; 179
 246:	38 e3       	ldi	r19, 0x38	; 56
		for (int i = 0; i < ( neopixel_pixels - 1); i++){
			uint8_t baseLocation = i * 3;
			uint8_t newBaseLocation = (i + 1) * 3;

			buffer[ baseLocation + NEO_RED ] = buffer[ newBaseLocation + NEO_RED ];
 248:	84 81       	ldd	r24, Z+4	; 0x04
 24a:	81 83       	std	Z+1, r24	; 0x01
			buffer[ baseLocation + NEO_GREEN ] = buffer[newBaseLocation + NEO_GREEN];
 24c:	83 81       	ldd	r24, Z+3	; 0x03
 24e:	80 83       	st	Z, r24
			buffer[ baseLocation +NEO_BLUE ] = buffer[newBaseLocation + NEO_BLUE];
 250:	85 81       	ldd	r24, Z+5	; 0x05
 252:	82 83       	std	Z+2, r24	; 0x02
 254:	33 96       	adiw	r30, 0x03	; 3


void neopixel_shift(bool direction){

   if( direction ) {
		for (int i = 0; i < ( neopixel_pixels - 1); i++){
 256:	e2 17       	cp	r30, r18
 258:	f3 07       	cpc	r31, r19
 25a:	b1 f7       	brne	.-20     	; 0x248 <neopixel_shift+0xc>
			buffer[ baseLocation + NEO_RED ] = buffer[ newBaseLocation + NEO_RED ];
			buffer[ baseLocation + NEO_GREEN ] = buffer[newBaseLocation + NEO_GREEN];
			buffer[ baseLocation +NEO_BLUE ] = buffer[newBaseLocation + NEO_BLUE];
		}
		uint8_t lastLocation = (neopixel_pixels -1) *3;
		buffer[lastLocation + NEO_RED] = buffer[NEO_RED];
 25c:	e2 e0       	ldi	r30, 0x02	; 2
 25e:	f8 e3       	ldi	r31, 0x38	; 56
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	80 93 b4 38 	sts	0x38B4, r24	; 0x8038b4 <__data_end+0xb2>
		buffer[lastLocation + NEO_GREEN] = buffer[NEO_GREEN];
 266:	80 81       	ld	r24, Z
 268:	80 93 b3 38 	sts	0x38B3, r24	; 0x8038b3 <__data_end+0xb1>
		buffer[lastLocation + NEO_BLUE] = buffer[NEO_BLUE];
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	80 93 b5 38 	sts	0x38B5, r24	; 0x8038b5 <__data_end+0xb3>
 272:	08 95       	ret
	} else {


	    uint8_t firstPixel = 0;
	    buffer[firstPixel + NEO_RED] =  buffer[ LAST_PIXEL + NEO_RED];
 274:	e2 e0       	ldi	r30, 0x02	; 2
 276:	f8 e3       	ldi	r31, 0x38	; 56
 278:	80 91 b4 38 	lds	r24, 0x38B4	; 0x8038b4 <__data_end+0xb2>
 27c:	81 83       	std	Z+1, r24	; 0x01
	    buffer[firstPixel + NEO_GREEN] = buffer[ LAST_PIXEL + NEO_GREEN];
 27e:	80 91 b3 38 	lds	r24, 0x38B3	; 0x8038b3 <__data_end+0xb1>
 282:	80 83       	st	Z, r24
	    buffer[firstPixel + NEO_BLUE] = buffer[ LAST_PIXEL + NEO_BLUE];
 284:	80 91 b5 38 	lds	r24, 0x38B5	; 0x8038b5 <__data_end+0xb3>
 288:	82 83       	std	Z+2, r24	; 0x02
 28a:	e3 eb       	ldi	r30, 0xB3	; 179
 28c:	f8 e3       	ldi	r31, 0x38	; 56
 28e:	22 e0       	ldi	r18, 0x02	; 2
 290:	38 e3       	ldi	r19, 0x38	; 56
 292:	8e ea       	ldi	r24, 0xAE	; 174

		for (int i = neopixel_pixels -1; i > 0; i--){
			uint8_t  baseLocation= i * 3;
			uint8_t newBaseLocation = ( i - 1) * 3;

			buffer[ baseLocation + NEO_RED ] = buffer[ newBaseLocation + NEO_RED ];
 294:	a8 2f       	mov	r26, r24
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	ae 5f       	subi	r26, 0xFE	; 254
 29a:	b7 4c       	sbci	r27, 0xC7	; 199
 29c:	11 96       	adiw	r26, 0x01	; 1
 29e:	9c 91       	ld	r25, X
 2a0:	11 97       	sbiw	r26, 0x01	; 1
 2a2:	91 83       	std	Z+1, r25	; 0x01
			buffer[ baseLocation + NEO_GREEN ] = buffer[newBaseLocation + NEO_GREEN];
 2a4:	9c 91       	ld	r25, X
 2a6:	90 83       	st	Z, r25
			buffer[ baseLocation +NEO_BLUE ] = buffer[newBaseLocation + NEO_BLUE];
 2a8:	12 96       	adiw	r26, 0x02	; 2
 2aa:	9c 91       	ld	r25, X
 2ac:	92 83       	std	Z+2, r25	; 0x02
 2ae:	83 50       	subi	r24, 0x03	; 3
 2b0:	33 97       	sbiw	r30, 0x03	; 3
	    uint8_t firstPixel = 0;
	    buffer[firstPixel + NEO_RED] =  buffer[ LAST_PIXEL + NEO_RED];
	    buffer[firstPixel + NEO_GREEN] = buffer[ LAST_PIXEL + NEO_GREEN];
	    buffer[firstPixel + NEO_BLUE] = buffer[ LAST_PIXEL + NEO_BLUE];

		for (int i = neopixel_pixels -1; i > 0; i--){
 2b2:	e2 17       	cp	r30, r18
 2b4:	f3 07       	cpc	r31, r19
 2b6:	71 f7       	brne	.-36     	; 0x294 <neopixel_shift+0x58>
 2b8:	08 95       	ret

000002ba <neopixel_show>:
}



void neopixel_show()
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	26 97       	sbiw	r28, 0x06	; 6
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	de bf       	out	0x3e, r29	; 62
	volatile uint16_t  i = neopixel_buffer_size; // Loop counter
 2c8:	84 eb       	ldi	r24, 0xB4	; 180
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	9a 83       	std	Y+2, r25	; 0x02

	volatile uint8_t *port;

	volatile uint8_t *ptr = &buffer[0],   // Pointer to next byte
	b   = *ptr++,   // Current byte value
 2d0:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 2d4:	8b 83       	std	Y+3, r24	; 0x03
	hi,             // PORT w/output bit set high
	lo;             // PORT w/output bit set low

	volatile uint8_t bit;

	hi = VPORTA_OUT |  pinMask;
 2d6:	91 b1       	in	r25, 0x01	; 1
 2d8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 2dc:	98 2b       	or	r25, r24
 2de:	9c 83       	std	Y+4, r25	; 0x04
	lo = VPORTA_OUT & ~pinMask;
 2e0:	91 b1       	in	r25, 0x01	; 1
 2e2:	80 95       	com	r24
 2e4:	89 23       	and	r24, r25
 2e6:	8d 83       	std	Y+5, r24	; 0x05
    bit  = 8;
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	8e 83       	std	Y+6, r24	; 0x06

	port = &VPORTA_OUT;

	VPORTA_OUT = lo;
 2ec:	8d 81       	ldd	r24, Y+5	; 0x05
 2ee:	81 b9       	out	0x01, r24	; 1

    asm volatile(
 2f0:	4c 81       	ldd	r20, Y+4	; 0x04
 2f2:	5d 81       	ldd	r21, Y+5	; 0x05
 2f4:	3b 81       	ldd	r19, Y+3	; 0x03
 2f6:	2e 81       	ldd	r18, Y+6	; 0x06
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	a3 e0       	ldi	r26, 0x03	; 3
 302:	b8 e3       	ldi	r27, 0x38	; 56

00000304 <neo_start>:
 304:	40 83       	st	Z, r20
 306:	37 fd       	sbrc	r19, 7
 308:	0e c0       	rjmp	.+28     	; 0x326 <do_HI>

0000030a <do_LOW>:
 30a:	00 00       	nop
 30c:	00 00       	nop
 30e:	50 83       	st	Z, r21
	...
 324:	0e c0       	rjmp	.+28     	; 0x342 <next_bit>

00000326 <do_HI>:
	...
 336:	50 83       	st	Z, r21
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 00       	nop
 33e:	01 c0       	rjmp	.+2      	; 0x342 <next_bit>
	...

00000342 <next_bit>:
 342:	2a 95       	dec	r18
 344:	11 f0       	breq	.+4      	; 0x34a <next_byte>
 346:	33 1f       	adc	r19, r19
 348:	dd cf       	rjmp	.-70     	; 0x304 <neo_start>

0000034a <next_byte>:
 34a:	28 e0       	ldi	r18, 0x08	; 8
 34c:	3d 91       	ld	r19, X+
 34e:	50 83       	st	Z, r21
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	c1 f6       	brne	.-80     	; 0x304 <neo_start>
 354:	3b 83       	std	Y+3, r19	; 0x03
 356:	2e 83       	std	Y+6, r18	; 0x06
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	9a 83       	std	Y+2, r25	; 0x02
      [count] "+w" (i)
    : [ptr]    "e" (ptr),
      [hi]     "r" (hi),
      [lo]     "r" (lo));

}
 35c:	26 96       	adiw	r28, 0x06	; 6
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	de bf       	out	0x3e, r29	; 62
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
