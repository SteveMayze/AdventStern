
NeoPixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  0000027a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00803802  00803802  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021cd  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b19  00000000  00000000  0000259d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004eb  00000000  00000000  000040b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000045a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fa4  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000244  00000000  00000000  000055c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 3b       	cpi	r26, 0xB6	; 182
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
	// This register is protected and can not be changed until the CPP register in the CPU
	// is written with the signature of 0xD8 ... I think I need to insert some assembly code here
	// This PEN flag is reset, this means that the Source clock is fed right through and not pre-scaled.
	// This needs to be checked for the electrical characteristics is such that the full 5V is required.

	CPU_CCP = CCP_IOREG_gc;
  ba:	88 ed       	ldi	r24, 0xD8	; 216
  bc:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = _MAIN_CLOCK;
  be:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

	PORTA.DIR |= 1 << 1;
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f4 e0       	ldi	r31, 0x04	; 4
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24

	uint8_t red_color = 0;
	uint8_t green_color = 0;
	uint8_t blue_color = 0;

	for (int i = 0; i < neopixel_pixels; i++)
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if ( i <= 9) {
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
  d0:	0f 2e       	mov	r0, r31
  d2:	f3 e0       	ldi	r31, 0x03	; 3
  d4:	ff 2e       	mov	r15, r31
  d6:	f0 2d       	mov	r31, r0

	for (int i = 0; i < neopixel_pixels; i++)
	{
		if ( i <= 9) {
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
  d8:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t blue_color = 0;

	for (int i = 0; i < neopixel_pixels; i++)
	{
		if ( i <= 9) {
			red_color = LOW_INTENSITY;
  da:	13 e0       	ldi	r17, 0x03	; 3
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <main+0x36>
	uint8_t green_color = 0;
	uint8_t blue_color = 0;

	for (int i = 0; i < neopixel_pixels; i++)
	{
		if ( i <= 9) {
  de:	ca 30       	cpi	r28, 0x0A	; 10
  e0:	d1 05       	cpc	r29, r1
  e2:	34 f4       	brge	.+12     	; 0xf0 <main+0x36>
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
  e4:	0f 2e       	mov	r0, r31
  e6:	f3 e0       	ldi	r31, 0x03	; 3
  e8:	ff 2e       	mov	r15, r31
  ea:	f0 2d       	mov	r31, r0

	for (int i = 0; i < neopixel_pixels; i++)
	{
		if ( i <= 9) {
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
  ec:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t blue_color = 0;

	for (int i = 0; i < neopixel_pixels; i++)
	{
		if ( i <= 9) {
			red_color = LOW_INTENSITY;
  ee:	13 e0       	ldi	r17, 0x03	; 3
  f0:	ce 01       	movw	r24, r28
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
		}
		if ( i >= 10 && i <= 19) {
  f2:	9e 01       	movw	r18, r28
  f4:	2a 50       	subi	r18, 0x0A	; 10
  f6:	31 09       	sbc	r19, r1
  f8:	2a 30       	cpi	r18, 0x0A	; 10
  fa:	31 05       	cpc	r19, r1
  fc:	18 f4       	brcc	.+6      	; 0x104 <main+0x4a>
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
			blue_color = NEO_ALL_OFF;
  fe:	f1 2c       	mov	r15, r1
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
		}
		if ( i >= 10 && i <= 19) {
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
 100:	00 e0       	ldi	r16, 0x00	; 0
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
		}
		if ( i >= 10 && i <= 19) {
			red_color = LOW_INTENSITY;
 102:	13 e0       	ldi	r17, 0x03	; 3
			green_color = NEO_ALL_OFF;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 20 && i <= 29) {
 104:	9c 01       	movw	r18, r24
 106:	24 51       	subi	r18, 0x14	; 20
 108:	31 09       	sbc	r19, r1
 10a:	2a 30       	cpi	r18, 0x0A	; 10
 10c:	31 05       	cpc	r19, r1
 10e:	18 f4       	brcc	.+6      	; 0x116 <main+0x5c>
			red_color = LOW_INTENSITY;
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
 110:	f1 2c       	mov	r15, r1
			green_color = NEO_ALL_OFF;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 20 && i <= 29) {
			red_color = LOW_INTENSITY;
			green_color = LOW_INTENSITY;
 112:	03 e0       	ldi	r16, 0x03	; 3
			red_color = LOW_INTENSITY;
			green_color = NEO_ALL_OFF;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 20 && i <= 29) {
			red_color = LOW_INTENSITY;
 114:	13 e0       	ldi	r17, 0x03	; 3
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 30 && i <= 39) {
 116:	9c 01       	movw	r18, r24
 118:	2e 51       	subi	r18, 0x1E	; 30
 11a:	31 09       	sbc	r19, r1
 11c:	2a 30       	cpi	r18, 0x0A	; 10
 11e:	31 05       	cpc	r19, r1
 120:	18 f4       	brcc	.+6      	; 0x128 <main+0x6e>
			red_color = NEO_ALL_OFF;
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
 122:	f1 2c       	mov	r15, r1
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 30 && i <= 39) {
			red_color = NEO_ALL_OFF;
			green_color = LOW_INTENSITY;
 124:	03 e0       	ldi	r16, 0x03	; 3
			red_color = LOW_INTENSITY;
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 30 && i <= 39) {
			red_color = NEO_ALL_OFF;
 126:	10 e0       	ldi	r17, 0x00	; 0
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 40 && i <= 49) {
 128:	88 97       	sbiw	r24, 0x28	; 40
 12a:	0a 97       	sbiw	r24, 0x0a	; 10
 12c:	30 f4       	brcc	.+12     	; 0x13a <main+0x80>
			red_color = NEO_ALL_OFF;
			green_color = LOW_INTENSITY;
			blue_color = LOW_INTENSITY;
 12e:	0f 2e       	mov	r0, r31
 130:	f3 e0       	ldi	r31, 0x03	; 3
 132:	ff 2e       	mov	r15, r31
 134:	f0 2d       	mov	r31, r0
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 40 && i <= 49) {
			red_color = NEO_ALL_OFF;
			green_color = LOW_INTENSITY;
 136:	03 e0       	ldi	r16, 0x03	; 3
			red_color = NEO_ALL_OFF;
			green_color = LOW_INTENSITY;
			blue_color = NEO_ALL_OFF;
		}
		if ( i >= 40 && i <= 49) {
			red_color = NEO_ALL_OFF;
 138:	10 e0       	ldi	r17, 0x00	; 0
			green_color = LOW_INTENSITY;
			blue_color = LOW_INTENSITY;
		}
		if ( i >= 50 ) {
 13a:	c2 33       	cpi	r28, 0x32	; 50
 13c:	d1 05       	cpc	r29, r1
 13e:	34 f0       	brlt	.+12     	; 0x14c <main+0x92>
			red_color = NEO_ALL_OFF;
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
 140:	0f 2e       	mov	r0, r31
 142:	f3 e0       	ldi	r31, 0x03	; 3
 144:	ff 2e       	mov	r15, r31
 146:	f0 2d       	mov	r31, r0
			green_color = LOW_INTENSITY;
			blue_color = LOW_INTENSITY;
		}
		if ( i >= 50 ) {
			red_color = NEO_ALL_OFF;
			green_color = NEO_ALL_OFF;
 148:	00 e0       	ldi	r16, 0x00	; 0
			red_color = NEO_ALL_OFF;
			green_color = LOW_INTENSITY;
			blue_color = LOW_INTENSITY;
		}
		if ( i >= 50 ) {
			red_color = NEO_ALL_OFF;
 14a:	10 e0       	ldi	r17, 0x00	; 0
			green_color = NEO_ALL_OFF;
			blue_color = LOW_INTENSITY;
		}
		neopixel_setPixel(i, red_color, green_color, blue_color);
 14c:	2f 2d       	mov	r18, r15
 14e:	40 2f       	mov	r20, r16
 150:	61 2f       	mov	r22, r17
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 bf 00 	call	0x17e	; 0x17e <neopixel_setPixel>

	uint8_t red_color = 0;
	uint8_t green_color = 0;
	uint8_t blue_color = 0;

	for (int i = 0; i < neopixel_pixels; i++)
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	cc 33       	cpi	r28, 0x3C	; 60
 15c:	d1 05       	cpc	r29, r1
 15e:	09 f0       	breq	.+2      	; 0x162 <main+0xa8>
 160:	be cf       	rjmp	.-132    	; 0xde <main+0x24>
		}
		neopixel_setPixel(i, red_color, green_color, blue_color);
	}
	while(true)
	{
		neopixel_shift();
 162:	0e 94 ca 00 	call	0x194	; 0x194 <neopixel_shift>
		neopixel_show();
 166:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <neopixel_show>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f e3       	ldi	r18, 0x3F	; 63
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xb6>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xc0>
 17a:	00 00       	nop
 17c:	f2 cf       	rjmp	.-28     	; 0x162 <main+0xa8>

0000017e <neopixel_setPixel>:
uint8_t pinMask = 0x02;

void neopixel_setPixel(uint8_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    uint8_t location = pixel * 3;
	buffer[ location + NEO_RED ] = red;
 17e:	e8 2f       	mov	r30, r24
 180:	ee 0f       	add	r30, r30
 182:	8e 0f       	add	r24, r30
 184:	e8 2f       	mov	r30, r24
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ee 5f       	subi	r30, 0xFE	; 254
 18a:	f7 4c       	sbci	r31, 0xC7	; 199
 18c:	61 83       	std	Z+1, r22	; 0x01
	buffer[ location + NEO_GREEN ] = green;
 18e:	40 83       	st	Z, r20
	buffer[ location + NEO_BLUE ] = blue;
 190:	22 83       	std	Z+2, r18	; 0x02
 192:	08 95       	ret

00000194 <neopixel_shift>:

}



void neopixel_shift(void){
 194:	e2 e0       	ldi	r30, 0x02	; 2
 196:	f8 e3       	ldi	r31, 0x38	; 56
 198:	23 eb       	ldi	r18, 0xB3	; 179
 19a:	38 e3       	ldi	r19, 0x38	; 56

	for (int i = 0; i < ( neopixel_pixels - 1); i++){
	    uint8_t baseLocation = i * 3;
		uint8_t newBaseLocation = (i+1) * 3;

		buffer[ baseLocation + NEO_RED ] = buffer[ newBaseLocation + NEO_RED ];
 19c:	84 81       	ldd	r24, Z+4	; 0x04
 19e:	81 83       	std	Z+1, r24	; 0x01
		buffer[ baseLocation + NEO_GREEN ] = buffer[newBaseLocation + NEO_GREEN];
 1a0:	83 81       	ldd	r24, Z+3	; 0x03
 1a2:	80 83       	st	Z, r24
		buffer[ baseLocation +NEO_BLUE ] = buffer[newBaseLocation + NEO_BLUE];
 1a4:	85 81       	ldd	r24, Z+5	; 0x05
 1a6:	82 83       	std	Z+2, r24	; 0x02
 1a8:	33 96       	adiw	r30, 0x03	; 3



void neopixel_shift(void){

	for (int i = 0; i < ( neopixel_pixels - 1); i++){
 1aa:	e2 17       	cp	r30, r18
 1ac:	f3 07       	cpc	r31, r19
 1ae:	b1 f7       	brne	.-20     	; 0x19c <neopixel_shift+0x8>
		buffer[ baseLocation + NEO_RED ] = buffer[ newBaseLocation + NEO_RED ];
		buffer[ baseLocation + NEO_GREEN ] = buffer[newBaseLocation + NEO_GREEN];
		buffer[ baseLocation +NEO_BLUE ] = buffer[newBaseLocation + NEO_BLUE];
	}
	uint8_t lastLocation = (neopixel_pixels -1) *3;
	buffer[lastLocation + NEO_RED] = buffer[NEO_RED];
 1b0:	e2 e0       	ldi	r30, 0x02	; 2
 1b2:	f8 e3       	ldi	r31, 0x38	; 56
 1b4:	81 81       	ldd	r24, Z+1	; 0x01
 1b6:	80 93 b4 38 	sts	0x38B4, r24	; 0x8038b4 <__data_end+0xb2>
	buffer[lastLocation + NEO_GREEN] = buffer[NEO_GREEN];
 1ba:	80 81       	ld	r24, Z
 1bc:	80 93 b3 38 	sts	0x38B3, r24	; 0x8038b3 <__data_end+0xb1>
	buffer[lastLocation + NEO_BLUE] = buffer[NEO_BLUE];
 1c0:	82 81       	ldd	r24, Z+2	; 0x02
 1c2:	80 93 b5 38 	sts	0x38B5, r24	; 0x8038b5 <__data_end+0xb3>
 1c6:	08 95       	ret

000001c8 <neopixel_show>:
}



void neopixel_show()
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	26 97       	sbiw	r28, 0x06	; 6
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	de bf       	out	0x3e, r29	; 62
	volatile uint16_t  i = neopixel_buffer_size; // Loop counter
 1d6:	84 eb       	ldi	r24, 0xB4	; 180
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	9a 83       	std	Y+2, r25	; 0x02

	volatile uint8_t *port;

	volatile uint8_t *ptr = &buffer[0],   // Pointer to next byte
	b   = *ptr++,   // Current byte value
 1de:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 1e2:	8b 83       	std	Y+3, r24	; 0x03
	hi,             // PORT w/output bit set high
	lo;             // PORT w/output bit set low

	volatile uint8_t bit;

	hi = VPORTA_OUT |  pinMask;
 1e4:	91 b1       	in	r25, 0x01	; 1
 1e6:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 1ea:	98 2b       	or	r25, r24
 1ec:	9c 83       	std	Y+4, r25	; 0x04
	lo = VPORTA_OUT & ~pinMask;
 1ee:	91 b1       	in	r25, 0x01	; 1
 1f0:	80 95       	com	r24
 1f2:	89 23       	and	r24, r25
 1f4:	8d 83       	std	Y+5, r24	; 0x05
    bit  = 8;
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	8e 83       	std	Y+6, r24	; 0x06

	port = &VPORTA_OUT;

	VPORTA_OUT = lo;
 1fa:	8d 81       	ldd	r24, Y+5	; 0x05
 1fc:	81 b9       	out	0x01, r24	; 1

    asm volatile(
 1fe:	4c 81       	ldd	r20, Y+4	; 0x04
 200:	5d 81       	ldd	r21, Y+5	; 0x05
 202:	3b 81       	ldd	r19, Y+3	; 0x03
 204:	2e 81       	ldd	r18, Y+6	; 0x06
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	e1 e0       	ldi	r30, 0x01	; 1
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	a3 e0       	ldi	r26, 0x03	; 3
 210:	b8 e3       	ldi	r27, 0x38	; 56

00000212 <neo_start>:
 212:	40 83       	st	Z, r20
 214:	37 fd       	sbrc	r19, 7
 216:	0e c0       	rjmp	.+28     	; 0x234 <do_HI>

00000218 <do_LOW>:
 218:	00 00       	nop
 21a:	00 00       	nop
 21c:	50 83       	st	Z, r21
	...
 232:	0e c0       	rjmp	.+28     	; 0x250 <next_bit>

00000234 <do_HI>:
	...
 244:	50 83       	st	Z, r21
 246:	00 00       	nop
 248:	00 00       	nop
 24a:	00 00       	nop
 24c:	01 c0       	rjmp	.+2      	; 0x250 <next_bit>
	...

00000250 <next_bit>:
 250:	2a 95       	dec	r18
 252:	11 f0       	breq	.+4      	; 0x258 <next_byte>
 254:	33 1f       	adc	r19, r19
 256:	dd cf       	rjmp	.-70     	; 0x212 <neo_start>

00000258 <next_byte>:
 258:	28 e0       	ldi	r18, 0x08	; 8
 25a:	3d 91       	ld	r19, X+
 25c:	50 83       	st	Z, r21
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	c1 f6       	brne	.-80     	; 0x212 <neo_start>
 262:	3b 83       	std	Y+3, r19	; 0x03
 264:	2e 83       	std	Y+6, r18	; 0x06
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	9a 83       	std	Y+2, r25	; 0x02
      [count] "+w" (i)
    : [ptr]    "e" (ptr),
      [hi]     "r" (hi),
      [lo]     "r" (lo));

}
 26a:	26 96       	adiw	r28, 0x06	; 6
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	de bf       	out	0x3e, r29	; 62
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
