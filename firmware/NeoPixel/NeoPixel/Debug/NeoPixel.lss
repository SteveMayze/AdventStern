
NeoPixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00803802  00803802  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000209d  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a81  00000000  00000000  0000238d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036b  00000000  00000000  00003e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000417c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f15  00000000  00000000  000041e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cf  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e0 ea       	ldi	r30, 0xA0	; 160
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 3b       	cpi	r26, 0xB6	; 182
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
    // This register is protected and can not be changed until the CPP register in the CPU
    // is written with the signature of 0xD8 ... I think I need to insert some assembly code here
    // This PEN flag is reset, this means that the Source clock is fed right through and not pre-scaled.
    // This needs to be checked for the electrical characteristics is such that the full 5V is required.

    CPU_CCP = CCP_IOREG_gc;
  ba:	88 ed       	ldi	r24, 0xD8	; 216
  bc:	84 bf       	out	0x34, r24	; 52
    CLKCTRL.MCLKCTRLB = 0x02;
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    PORTA.DIR |= 1 << 1;
  c4:	e0 e0       	ldi	r30, 0x00	; 0
  c6:	f4 e0       	ldi	r31, 0x04	; 4
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
  ce:	c0 e0       	ldi	r28, 0x00	; 0
        for (int i = 0; i < neopixel_pixels; i++)
        {
	        neopixel_setPixel(i, 0xFF, 0xFF, 0xFF);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	4f ef       	ldi	r20, 0xFF	; 255
  d4:	6f ef       	ldi	r22, 0xFF	; 255
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 74 00 	call	0xe8	; 0xe8 <neopixel_setPixel>
  dc:	cf 5f       	subi	r28, 0xFF	; 255

    CPU_CCP = CCP_IOREG_gc;
    CLKCTRL.MCLKCTRLB = 0x02;

    PORTA.DIR |= 1 << 1;
        for (int i = 0; i < neopixel_pixels; i++)
  de:	cc 33       	cpi	r28, 0x3C	; 60
  e0:	b9 f7       	brne	.-18     	; 0xd0 <main+0x16>
	        neopixel_setPixel(i, 0xFF, 0xFF, 0xFF);
        }

	while(1)
	{
		neopixel_show();
  e2:	0e 94 87 00 	call	0x10e	; 0x10e <neopixel_show>
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x28>

000000e8 <neopixel_setPixel>:
uint8_t pinMask = 0x02;

void neopixel_setPixel(uint8_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    uint8_t location = pixel * 3;
	buffer[ location + red ] = red;
  e8:	98 2f       	mov	r25, r24
  ea:	99 0f       	add	r25, r25
  ec:	89 0f       	add	r24, r25
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	8e 5f       	subi	r24, 0xFE	; 254
  f2:	97 4c       	sbci	r25, 0xC7	; 199
  f4:	fc 01       	movw	r30, r24
  f6:	e6 0f       	add	r30, r22
  f8:	f1 1d       	adc	r31, r1
  fa:	60 83       	st	Z, r22
	buffer[ location + green ] = green;
  fc:	fc 01       	movw	r30, r24
  fe:	e4 0f       	add	r30, r20
 100:	f1 1d       	adc	r31, r1
 102:	40 83       	st	Z, r20
	buffer[ location + blue ] = blue;
 104:	fc 01       	movw	r30, r24
 106:	e2 0f       	add	r30, r18
 108:	f1 1d       	adc	r31, r1
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <neopixel_show>:



#ifdef _NEO_ALGORITHM_3
void neopixel_show()
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	26 97       	sbiw	r28, 0x06	; 6
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	de bf       	out	0x3e, r29	; 62
	volatile uint16_t  i = neopixel_buffer_size; // Loop counter
 11c:	84 eb       	ldi	r24, 0xB4	; 180
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	9a 83       	std	Y+2, r25	; 0x02

	volatile uint8_t *port;

	volatile uint8_t *ptr = &buffer[0],   // Pointer to next byte
	b   = *ptr++,   // Current byte value
 124:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 128:	8b 83       	std	Y+3, r24	; 0x03
	hi,             // PORT w/output bit set high
	lo;             // PORT w/output bit set low

	volatile uint8_t bit;

	hi = VPORTA_OUT |  pinMask;
 12a:	91 b1       	in	r25, 0x01	; 1
 12c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 130:	98 2b       	or	r25, r24
 132:	9c 83       	std	Y+4, r25	; 0x04
	lo = VPORTA_OUT & ~pinMask;
 134:	91 b1       	in	r25, 0x01	; 1
 136:	80 95       	com	r24
 138:	89 23       	and	r24, r25
 13a:	8d 83       	std	Y+5, r24	; 0x05
    bit  = 8;
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	8e 83       	std	Y+6, r24	; 0x06

	port = &VPORTA_OUT;

	VPORTA_OUT = lo;
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	81 b9       	out	0x01, r24	; 1

    asm volatile(
 144:	4c 81       	ldd	r20, Y+4	; 0x04
 146:	5d 81       	ldd	r21, Y+5	; 0x05
 148:	3b 81       	ldd	r19, Y+3	; 0x03
 14a:	2e 81       	ldd	r18, Y+6	; 0x06
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	a3 e0       	ldi	r26, 0x03	; 3
 156:	b8 e3       	ldi	r27, 0x38	; 56

00000158 <neo_start>:
 158:	40 83       	st	Z, r20
 15a:	37 fd       	sbrc	r19, 7
 15c:	04 c0       	rjmp	.+8      	; 0x166 <do_HI>

0000015e <do_LOW>:
 15e:	00 c0       	rjmp	.+0      	; 0x160 <do_LOW+0x2>
 160:	00 00       	nop
 162:	50 83       	st	Z, r21
 164:	08 c0       	rjmp	.+16     	; 0x176 <next_bit>

00000166 <do_HI>:
 166:	00 c0       	rjmp	.+0      	; 0x168 <do_HI+0x2>
 168:	00 c0       	rjmp	.+0      	; 0x16a <do_HI+0x4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <do_HI+0x6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <do_HI+0x8>
 16e:	00 00       	nop
 170:	50 83       	st	Z, r21
 172:	01 c0       	rjmp	.+2      	; 0x176 <next_bit>
	...

00000176 <next_bit>:
 176:	2a 95       	dec	r18
 178:	11 f0       	breq	.+4      	; 0x17e <next_byte>
 17a:	33 1f       	adc	r19, r19
 17c:	ed cf       	rjmp	.-38     	; 0x158 <neo_start>

0000017e <next_byte>:
 17e:	28 e0       	ldi	r18, 0x08	; 8
 180:	3d 91       	ld	r19, X+
 182:	50 83       	st	Z, r21
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	41 f7       	brne	.-48     	; 0x158 <neo_start>
 188:	3b 83       	std	Y+3, r19	; 0x03
 18a:	2e 83       	std	Y+6, r18	; 0x06
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	9a 83       	std	Y+2, r25	; 0x02
    [count] "+w" (i)
    : [ptr]    "e" (ptr),
    [hi]     "r" (hi),
    [lo]     "r" (lo));

}
 190:	26 96       	adiw	r28, 0x06	; 6
 192:	cd bf       	out	0x3d, r28	; 61
 194:	de bf       	out	0x3e, r29	; 62
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
