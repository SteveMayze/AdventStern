
NeoPixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00803802  00803802  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002316  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b04  00000000  00000000  000026ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  000041ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000463c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f60  00000000  00000000  000046a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023f  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00005843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e4 e6       	ldi	r30, 0x64	; 100
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 3b       	cpi	r26, 0xB6	; 182
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
    // This register is protected and can not be changed until the CPP register in the CPU
    // is written with the signature of 0xD8 ... I think I need to insert some assembly code here
    // This PEN flag is reset, this means that the Source clock is fed right through and not pre-scaled.
    // This needs to be checked for the electrical characteristics is such that the full 5V is required.

    CPU_CCP = CCP_IOREG_gc;
  ba:	88 ed       	ldi	r24, 0xD8	; 216
  bc:	84 bf       	out	0x34, r24	; 52
    CLKCTRL.MCLKCTRLB = _MAIN_CLOCK;
  be:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    PORTA.DIR |= 1 << 1;
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f4 e0       	ldi	r31, 0x04	; 4
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
// (0x00 << CLKCTRL_PDIV_gp) | ( 0x00 << CLKCTRL_PEN_bp )

#ifdef _MAIN_TEST_1

int main(void)
{
  cc:	c0 e0       	ldi	r28, 0x00	; 0

	while(1)
	{
        for (int i = 0; i < neopixel_pixels; i++)
        {
	        neopixel_setPixel(i, NEO_ALL_ON, NEO_ALL_ON, NEO_ALL_ON);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	6f ef       	ldi	r22, 0xFF	; 255
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <neopixel_setPixel>
  da:	cf 5f       	subi	r28, 0xFF	; 255

    PORTA.DIR |= 1 << 1;

	while(1)
	{
        for (int i = 0; i < neopixel_pixels; i++)
  dc:	cc 33       	cpi	r28, 0x3C	; 60
  de:	b9 f7       	brne	.-18     	; 0xce <main+0x14>
        {
	        neopixel_setPixel(i, NEO_ALL_ON, NEO_ALL_ON, NEO_ALL_ON);
        }
        neopixel_show();
  e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <neopixel_show>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	9d e3       	ldi	r25, 0x3D	; 61
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x3a>
  f4:	00 00       	nop
  f6:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
        for (int i = 0; i < neopixel_pixels; i++)
        {
	        neopixel_setPixel(i, NEO_ALL_ON, NEO_ALL_OFF, NEO_ALL_OFF);
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	6f ef       	ldi	r22, 0xFF	; 255
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <neopixel_setPixel>
 104:	cf 5f       	subi	r28, 0xFF	; 255
        {
	        neopixel_setPixel(i, NEO_ALL_ON, NEO_ALL_ON, NEO_ALL_ON);
        }
        neopixel_show();
		_delay_ms(1000);
        for (int i = 0; i < neopixel_pixels; i++)
 106:	cc 33       	cpi	r28, 0x3C	; 60
 108:	b9 f7       	brne	.-18     	; 0xf8 <main+0x3e>
        {
	        neopixel_setPixel(i, NEO_ALL_ON, NEO_ALL_OFF, NEO_ALL_OFF);
        }
        neopixel_show();
 10a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <neopixel_show>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	9d e3       	ldi	r25, 0x3D	; 61
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x5a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x64>
 11e:	00 00       	nop
 120:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
		{
			neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_ON, NEO_ALL_OFF);
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	4f ef       	ldi	r20, 0xFF	; 255
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <neopixel_setPixel>
 12e:	cf 5f       	subi	r28, 0xFF	; 255
        {
	        neopixel_setPixel(i, NEO_ALL_ON, NEO_ALL_OFF, NEO_ALL_OFF);
        }
        neopixel_show();
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
 130:	cc 33       	cpi	r28, 0x3C	; 60
 132:	b9 f7       	brne	.-18     	; 0x122 <main+0x68>
		{
			neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_ON, NEO_ALL_OFF);
		}
		neopixel_show();
 134:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <neopixel_show>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	9d e3       	ldi	r25, 0x3D	; 61
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x84>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x8e>
 148:	00 00       	nop
 14a:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
		{
			neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_OFF, NEO_ALL_ON);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <neopixel_setPixel>
 158:	cf 5f       	subi	r28, 0xFF	; 255
		{
			neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_ON, NEO_ALL_OFF);
		}
		neopixel_show();
		_delay_ms(1000);
		for (int i = 0; i < neopixel_pixels; i++)
 15a:	cc 33       	cpi	r28, 0x3C	; 60
 15c:	b9 f7       	brne	.-18     	; 0x14c <main+0x92>
		{
			neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_OFF, NEO_ALL_ON);
		}
		neopixel_show();
 15e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <neopixel_show>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	9d e3       	ldi	r25, 0x3D	; 61
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xae>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xb8>
 172:	00 00       	nop
 174:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);	
        for (int i = 0; i < neopixel_pixels; i++)
        {
	        neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_OFF, NEO_ALL_OFF);
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <neopixel_setPixel>
 182:	cf 5f       	subi	r28, 0xFF	; 255
		{
			neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_OFF, NEO_ALL_ON);
		}
		neopixel_show();
		_delay_ms(1000);	
        for (int i = 0; i < neopixel_pixels; i++)
 184:	cc 33       	cpi	r28, 0x3C	; 60
 186:	b9 f7       	brne	.-18     	; 0x176 <main+0xbc>
        {
	        neopixel_setPixel(i, NEO_ALL_OFF, NEO_ALL_OFF, NEO_ALL_OFF);
        }
        neopixel_show();
 188:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <neopixel_show>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	9d e3       	ldi	r25, 0x3D	; 61
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xd8>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xe2>
 19c:	00 00       	nop
 19e:	96 cf       	rjmp	.-212    	; 0xcc <main+0x12>

000001a0 <neopixel_setPixel>:
uint8_t pinMask = 0x02;

void neopixel_setPixel(uint8_t pixel, uint8_t red, uint8_t green, uint8_t blue)
{
    uint8_t location = pixel * 3;
	buffer[ location + red ] = red;
 1a0:	98 2f       	mov	r25, r24
 1a2:	99 0f       	add	r25, r25
 1a4:	89 0f       	add	r24, r25
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8e 5f       	subi	r24, 0xFE	; 254
 1aa:	97 4c       	sbci	r25, 0xC7	; 199
 1ac:	fc 01       	movw	r30, r24
 1ae:	e6 0f       	add	r30, r22
 1b0:	f1 1d       	adc	r31, r1
 1b2:	60 83       	st	Z, r22
	buffer[ location + green ] = green;
 1b4:	fc 01       	movw	r30, r24
 1b6:	e4 0f       	add	r30, r20
 1b8:	f1 1d       	adc	r31, r1
 1ba:	40 83       	st	Z, r20
	buffer[ location + blue ] = blue;
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 0f       	add	r30, r18
 1c0:	f1 1d       	adc	r31, r1
 1c2:	20 83       	st	Z, r18
 1c4:	08 95       	ret

000001c6 <neopixel_show>:


#ifdef _NEO_ALGORITHM_3

void neopixel_show()
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	26 97       	sbiw	r28, 0x06	; 6
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	de bf       	out	0x3e, r29	; 62
	volatile uint16_t  i = neopixel_buffer_size; // Loop counter
 1d4:	84 eb       	ldi	r24, 0xB4	; 180
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	9a 83       	std	Y+2, r25	; 0x02

	volatile uint8_t *port;

	volatile uint8_t *ptr = &buffer[0],   // Pointer to next byte
	b   = *ptr++,   // Current byte value
 1dc:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 1e0:	8b 83       	std	Y+3, r24	; 0x03
	hi,             // PORT w/output bit set high
	lo;             // PORT w/output bit set low

	volatile uint8_t bit;

	hi = VPORTA_OUT |  pinMask;
 1e2:	91 b1       	in	r25, 0x01	; 1
 1e4:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
 1e8:	98 2b       	or	r25, r24
 1ea:	9c 83       	std	Y+4, r25	; 0x04
	lo = VPORTA_OUT & ~pinMask;
 1ec:	91 b1       	in	r25, 0x01	; 1
 1ee:	80 95       	com	r24
 1f0:	89 23       	and	r24, r25
 1f2:	8d 83       	std	Y+5, r24	; 0x05
    bit  = 8;
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	8e 83       	std	Y+6, r24	; 0x06

	port = &VPORTA_OUT;

	VPORTA_OUT = lo;
 1f8:	8d 81       	ldd	r24, Y+5	; 0x05
 1fa:	81 b9       	out	0x01, r24	; 1

    asm volatile(
 1fc:	4c 81       	ldd	r20, Y+4	; 0x04
 1fe:	5d 81       	ldd	r21, Y+5	; 0x05
 200:	3b 81       	ldd	r19, Y+3	; 0x03
 202:	2e 81       	ldd	r18, Y+6	; 0x06
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	9a 81       	ldd	r25, Y+2	; 0x02
 208:	e1 e0       	ldi	r30, 0x01	; 1
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	a3 e0       	ldi	r26, 0x03	; 3
 20e:	b8 e3       	ldi	r27, 0x38	; 56

00000210 <neo_start>:
 210:	40 83       	st	Z, r20
 212:	37 fd       	sbrc	r19, 7
 214:	08 c0       	rjmp	.+16     	; 0x226 <do_HI>

00000216 <do_LOW>:
 216:	00 c0       	rjmp	.+0      	; 0x218 <do_LOW+0x2>
 218:	50 83       	st	Z, r21
 21a:	00 c0       	rjmp	.+0      	; 0x21c <do_LOW+0x6>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <do_LOW+0x8>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <do_LOW+0xa>
 220:	00 c0       	rjmp	.+0      	; 0x222 <do_LOW+0xc>
 222:	00 c0       	rjmp	.+0      	; 0x224 <do_LOW+0xe>
 224:	0a c0       	rjmp	.+20     	; 0x23a <next_bit>

00000226 <do_HI>:
 226:	00 00       	nop
 228:	00 c0       	rjmp	.+0      	; 0x22a <do_HI+0x4>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <do_HI+0x6>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <do_HI+0x8>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <do_HI+0xa>
 230:	00 c0       	rjmp	.+0      	; 0x232 <do_HI+0xc>
 232:	00 00       	nop
 234:	50 83       	st	Z, r21
 236:	01 c0       	rjmp	.+2      	; 0x23a <next_bit>
	...

0000023a <next_bit>:
 23a:	2a 95       	dec	r18
 23c:	11 f0       	breq	.+4      	; 0x242 <next_byte>
 23e:	33 1f       	adc	r19, r19
 240:	e7 cf       	rjmp	.-50     	; 0x210 <neo_start>

00000242 <next_byte>:
 242:	28 e0       	ldi	r18, 0x08	; 8
 244:	3d 91       	ld	r19, X+
 246:	50 83       	st	Z, r21
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	11 f7       	brne	.-60     	; 0x210 <neo_start>
 24c:	3b 83       	std	Y+3, r19	; 0x03
 24e:	2e 83       	std	Y+6, r18	; 0x06
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	9a 83       	std	Y+2, r25	; 0x02
      [count] "+w" (i)
    : [ptr]    "e" (ptr),
      [hi]     "r" (hi),
      [lo]     "r" (lo));

}
 254:	26 96       	adiw	r28, 0x06	; 6
 256:	cd bf       	out	0x3d, r28	; 61
 258:	de bf       	out	0x3e, r29	; 62
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
